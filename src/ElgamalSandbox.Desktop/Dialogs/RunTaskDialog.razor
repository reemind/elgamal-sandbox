@using ElgamalSandbox.Desktop.Services
@using ElgamalSandbox.Core.Entities
@using ElgamalSandbox.Core.Enums
@using ElgamalSandbox.Core.Services
@inject TaskRunner TaskRunner
@inject ExceptionHandler ExceptionHandler

<MudDialog >
    <DialogContent>
        <MudOverlay Visible="@_isLoading" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        </MudOverlay>
        <MudStack>
            @foreach (var inputVar in Values.Keys)
            {
                <MudTextField Disabled="_isLoading" T="string"
                              Label="@inputVar"
                              Variant="Variant.Outlined"
                              TextChanged="value => Values[inputVar] = value"
                              Value="@Values[inputVar]"></MudTextField>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton 
            Color="Color.Primary" 
            OnClick="() => ExceptionHandler.HandleAsync(RunAsync)" 
            Variant="Variant.Filled">Запустить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public TaskDescription TaskForRun { get; set; }

    [Parameter] public string Code { get; set; }
    public Dictionary<string, string> Values { get; set; }

    private bool _isLoading = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        Values = TaskForRun.Attempts
            .Where(x => x.Type == AttemptTypes.Typical)
            // ReSharper disable once SimplifyLinqExpressionUseMinByAndMaxBy
            .OrderByDescending(x => x.CreatedAt)
            .FirstOrDefault()
            ?.Parameters!;

        if (Values is not null)
            return;

        Values = new Dictionary<string, string>();

        foreach (var inputVar in TaskForRun.InputVars)
        {
            Values[inputVar] = "";
        }
    }

    void Cancel() => MudDialog.Cancel();

    private async Task RunAsync()
    {
        _isLoading = true;
        var attempt = new TaskAttempt(
            Code,
            Values,
            AttemptTypes.Typical,
            TaskForRun);

        await TaskRunner.RunAsync(attempt);
        _isLoading = false;
        MudDialog.Close(attempt);
    }
}
