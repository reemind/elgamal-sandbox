@page "/"
@using ElgamalSandbox.Core.Enums
@using ChartType = MudBlazor.ChartType
@inject IDbContext DbContext

<MudPaper Class="pa-4 ma-4 d-flex justify-center">
    <h1>Виртуальная лабораторная работа</h1>
</MudPaper>

<MudPaper Class="pa-4 ma-4">
    <MudChart ChartType="ChartType.Donut" Width="300px" ChartOptions="@_chartOptions" Height="300px" InputData="@data" InputLabels="@labels"></MudChart>
</MudPaper>

<MudPaper Class="pa-4 ma-4 d-flex justify-center gap-4">
    <MudLink Href="https://t.me/ree_mind">Telegram</MudLink>
    <MudLink Href="https://github.com/reemind">Github</MudLink>
</MudPaper>

@code
{
    private double[] data;
    private string[] labels = ["Решено", "Начато", "Не решено"];
    private ChartOptions _chartOptions;

    /// <inheritdoc />
    protected override Task OnInitializedAsync()
    {
        var theme = new MudTheme();

        _chartOptions = new ChartOptions
        {
            ChartPalette =
            [
                theme.Palette.Success.Value,
                Colors.Blue.Default,
                theme.Palette.GrayDefault,
            ]
        };

        var stats = DbContext.TaskDescriptions
            .Select(x => new
            {   
                Solved = x.Attempts.Any(x => 
                    x.Type == AttemptTypes.Test
                    && x.IsSucceeded
                    && x.Tests.All(x => x.Result == TestResult.Success)),
                HasAttempts = x.Attempts.Any() || x.Playground != null
            });

        data =
        [
            stats.Count(x => x.Solved), // Решено
            stats.Count(x => x.HasAttempts && !x.Solved), // Начато
            stats.Count(x => !x.HasAttempts), // Не решено
        ];

        return base.OnInitializedAsync();
    }

}
