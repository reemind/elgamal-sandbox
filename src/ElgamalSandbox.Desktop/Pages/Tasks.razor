@page "/tasks"
@using ElgamalSandbox.Core.Entities
@using ElgamalSandbox.Core.Abstractions
@using ElgamalSandbox.Core.Extensions
@using Microsoft.EntityFrameworkCore
@inject IDbContext DbContext
@inject NavigationManager NavigationManager

<MudTable T="TaskDescription" RowClass="cursor-pointer" OnRowClick="OnItemSelected" Items="@Elements">
    <HeaderContent>
        <MudTh>Номер</MudTh>
        <MudTh>Название</MudTh>
        <MudTh>Кол-во попыток</MudTh>
        <MudTh>Последняя попытка</MudTh>
        <MudTh>Статус</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Номер">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                @context.Number
                @if (context.PerformanceTests.Any())
                {
                    <MudIcon Icon="@Icons.Material.Outlined.Timer"></MudIcon>
                }
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Название">
            @context.Name
        </MudTd>
        <MudTd DataLabel="Кол-во попыток">@context.Attempts.Count</MudTd>
        <MudTd DataLabel="Последняя попытка">
            @(context.Attempts.Any()
                ? context.Attempts.Max(x => x.CreatedAt).ToLocalString()
                :"")
        </MudTd>
        <MudTd DataLabel="Статус">
            <TaskResultChip TaskDescription="@context"></TaskResultChip>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IEnumerable<TaskDescription> Elements { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        Elements = await DbContext.TaskDescriptions
            .Include(x => x.Attempts)
                .ThenInclude(x => x.Tests)
            .Include(x => x.PerformanceTests)
            .ToListAsync();
    }

    private void OnItemSelected(TableRowClickEventArgs<TaskDescription> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"/task/{tableRowClickEventArgs.Item.Id}");
    }

}
